// test reports are saved properly
import { Dataset } from "../dataset";
import { logfile } from "./util";
import * as Covisit from "../analysis/Covisit";
import * as Reader from "../reader";
import * as Report from "../reportStore";
import * as es from "../elastic";

const getAnalysis = async () =>
  Reader.readFromFile(logfile)
    .then((d) => Dataset(d))
    .then((d) => Covisit.analyse(d));

const index = "fake-reports";

beforeAll(async () => {
  try {
    await es.deleteIfExists(index);
    await new Promise((resolve) => setTimeout(resolve, 2000));
    await es.testAndCreateIndex(index, Covisit.mappings);
    await new Promise((resolve) => setTimeout(resolve, 2000));
  } catch (err) {
    console.log("before error");
    console.log(err);
    throw new Error();
  }
}, 10000);

test("should properly store reports", async () => {
  const docs = await getAnalysis();
  expect(docs.length).toBeGreaterThan(0);

  const mappings = Covisit.mappings;
  try {
    const res = await Report.saveReport(docs, mappings, index);
    await new Promise((resolve) => setTimeout(resolve, 2000));
    expect(res).toBe(0);
  } catch (err) {
    console.log("store error");

    console.log(err);
    throw new Error();
  }
  //   await new Promise((resolve) => setTimeout(resolve, 2000));
});

test("should properly read reports", async () => {
  try {
    const report = await Covisit.readLastReport(es.esClient, index);
    //   expect(report.length).toBe(1);
    const [doc] = await getAnalysis();
    expect(report).toStrictEqual(doc);
  } catch (err) {
    console.log("read error");
    console.log(err);
    throw new Error();
  }
});

afterAll(async () => {
  await es.deleteIfExists(index);
});
