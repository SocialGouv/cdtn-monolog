import { DataFrame, IDataFrame } from "data-forge";

import { Cache } from "../cdtn/cdtn.types";
import { actionTypes } from "../reader/readerUtil";

const computeReports = (
  focusCounts,
  refCounts,
  previousMonthCount,

  focusStart,
  refStart,
  prevStart,

  reportId,
  reportType
) => {
  // FIXME use outer join to handle missing values (e.g. additions)

  const joinedM0M1 = refCounts.join(
    focusCounts,
    (left) => left.field,
    (right) => right.field,
    (left, right) => {
      return {
        field: left.field,
        m0_count: right.count,
        m0_norm_count: right.normalized_count,
        m1_count: left.count,
        m1_norm_count: left.normalized_count,
      };
    }
  );

  const joined = joinedM0M1.join(
    previousMonthCount,
    (left) => left.field,
    (right) => right.field,
    (left, right) => {
      return {
        ...left,
        m2_count: right.count,
      };
    }
  );

  const nContent = 40;
  const minOccurence = 40;

  const diff = joined
    .generateSeries({
      diff: (row) => row.m0_norm_count - row.m1_norm_count,
    })
    .generateSeries({
      abs_diff: (row) => Math.abs(row.diff),
    })
    .generateSeries({
      rel_diff: (row) => (row.m0_count - row.m1_count) / row.m1_count,
    })
    .where((r) => r.m1_count + r.m0_count + r.m2_count > minOccurence);

  const topDiff = diff.orderByDescending((r) => r.abs_diff).take(nContent);
  const topPop = diff.orderByDescending((r) => r.m0_count).take(nContent);

  const top = topDiff.concat(topPop).distinct((row) => row.field);

  return top.toArray().map((doc) => ({
    doc,
    m0_start: focusStart * 1000,
    m1_start: refStart * 1000,
    m2_start: prevStart * 1000,
    reportId,
    reportType,
  }));
};

/**
 * Step 2 - Compute popularity board for given period + reference
 * - group and count queries using clusters
 * - compute popularity board like the content board
 */
const step2 = async (cache: Cache, n: number, logs: DataFrame) => {
  const queries = logs
    .where((a) => a.type == actionTypes.search)
    .getSeries("query")
    .toArray()
    .filter((a) => a && a != "undefined")
    .map((q) => q.toLowerCase());

  const total_queries = queries.length;

  queries.forEach((query) => {
    const idx = cache.queryMap.get(query);
    const entry = idx && cache.clusters.get(idx);

    if (!entry) {
      //   console.log("Issue " + query);
      //   console.log(idx);
      return;
    }

    const curr = entry.queries.get(query);
    entry.queries.set(query, curr + 1);
  });

  /**@type {Map<string, {queries: Array<{query: string, count: number}>, total: number, total_normalized: number }>} */
  const counts = new Map();

  // we use a copy of our cache

  cache.clusters.entries();

  cache.forEach(({ queries: CacheQu }) => {
    const queries = Array.from(queryMap.entries()).map(([query, count]) => ({
      count,
      query,
    }));
    const total = queries.reduce((acc, q) => acc + q.count, 0);
    // most frequent query
    const principalQuery = queries.sort((a, b) => b.count - a.count)[0].query;

    if (total > 0)
      counts.set(principalQuery, {
        queries,
        total,
        total_normalized: total / total_queries,
      });
  });

  // we iterate over each query cluster
  cache.clusters.entries;

  return Array.from(counts.entries()).sort((a, b) => b[1].total - a[1].total);
};

// Run a popularity analysis for a given period, using generic content equality
export const analyse = async (
  logs: IDataFrame,
  cache: Cache,
  m0: string[],
  m1: string[],
  m2: string[],
  reportId: number
) => {
  // we build the cache
  //   const { cache, queryMap, logs } = await step1();

  // we split the logs
  // TODO borrowed from popularity

  // const refDate = Math.floor(start + (1 - proportion) * (end - start));

  // const afterRef = (a) => a.timestamp > refDate;

  const queryMap = cache.queryMap;

  /**
   *
   * @param {import("..").Cache} c
   */
  const cloneCache = (c) => {
    const e = Array.from(c.entries());
    return new Map(
      e.map(([idx, { queries, results }]) => [
        idx,
        { queries: new Map(queries), results: new Map(results) },
      ])
    );
  };

  const focus = logs.where((a) => m0.includes(a.logfile));
  const reference = logs.where((a) => m1.includes(a.logfile));
  const m2Data = logs.where((a) => m2.includes(a.logfile));

  // const testQ = "chÃ´mage partiel";

  const m0Cache = await step2(cloneCache(cache), queryMap, focus);
  const m0Start = focus.getSeries("timestamp").min();
  // console.log(focus.where((a) => a.query == testQ).count());
  // console.log(new Map(m0Cache).get(testQ));

  const m1Cache = await step2(cloneCache(cache), queryMap, reference);
  const m1Start = reference.getSeries("timestamp").min();
  // console.log(reference.where((a) => a.query == testQ).count());
  // console.log(new Map(m1Cache).get(testQ));

  const m2Cache = await step2(cloneCache(cache), queryMap, m2Data);
  const m2Start = m2Data.getSeries("timestamp").min();
  // console.log(m2Data.where((a) => a.query.toLowerCase() == testQ).count());
  // console.log(new Map(m2Cache).get(testQ));

  /* 
  const dates = logs.deflate((r) => r.timestamp);
  const start = dates.min();
  const end = dates.max();
  const refDate = Math.floor(start + (1 - proportion) * (end - start));

  const afterRef = (a) => a.timestamp > refDate;
  */

  // we compute counts for each split

  // we transform the counts into a proper dataframe
  const m0Counts = new DataFrame(
    m0Cache.map(([field, { total, total_normalized }]) => ({
      count: total,
      field,
      normalized_count: total_normalized,
    }))
  );

  const m1Counts = new DataFrame(
    m1Cache.map(([field, { total, total_normalized }]) => ({
      count: total,
      field,
      normalized_count: total_normalized,
    }))
  );

  const m2Counts = new DataFrame(
    m2Cache.map(([field, { total, total_normalized }]) => ({
      count: total,
      field,
      normalized_count: total_normalized,
    }))
  );
  // we compare the counts on the two period and select top x variations

  const reports = computeReports(
    m0Counts,
    m1Counts,
    m2Counts,

    m0Start,
    m1Start,
    m2Start,

    reportId,
    "query-popularity"
  );

  return reports;

  // const max = 4;
  /*
  console.log(new Date(end * 1000));
  console.log(JSON.stringify(countFocus.slice(0, max), null, 2));
  console.log("\n\n\n\n");
  console.log(new Date(start * 1000));
  console.log(new Date(end * 1000));
  console.log(JSON.stringify(countReference.slice(0, max), null, 2));
  */
};
